{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categoria","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","gifImg","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGif","img","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAqCeA,EA/Ba,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAoB1C,OACI,sBAAMC,SAZO,SAACC,GAClBA,EAAMC,iBAGFJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAS,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAMd,SACI,uBAAOO,KAAK,OACZC,YAAY,SACZC,MAAOV,EACPW,SArBc,SAACR,GACvBF,EAAcE,EAAMS,OAAOF,a,+BCTtBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,+FAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,0EAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAW,IAAD,EAC7B,MAAM,CACFC,GAAID,EAAOC,GACXC,MAAOF,EAAOE,MACdC,OAAM,UAAEH,EAAOG,cAAT,aAAE,EAAeC,iBAAiBZ,QAT7B,kBAaZM,GAbY,4CAAH,sDCYLO,EAZK,SAAC,GAAyB,IAAxBJ,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OAI7B,OAFAG,QAAQC,IAAIN,EAAIC,EAAOC,GAGnB,sBAAKK,UAAU,6CAAf,UACI,qBAAKC,IAAKN,EAAQO,IAAKR,IACvB,4BAAIA,QCuBDS,EA3BC,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECFL,SAACA,GAAc,IAAD,EACXf,mBAAS,CAC/BsB,KAAM,GACNe,SAAQ,IAHyB,mBAC9BC,EAD8B,KACvBC,EADuB,KAyBrC,OAnBAC,qBAAW,WACP1B,EAAQC,GAAU0B,MAAM,SAAAC,GAEpBH,EAAS,CACLjB,KAAMoB,EACNL,SAAQ,SAGjB,CAACtB,IAWGuB,EDrBiBK,CAAY5B,GAA7BO,EAFqB,EAErBA,KAAMe,EAFe,EAEfA,QAYb,OACI,qCACA,6BAAKtB,IAEJsB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SACUX,EAAKE,KAAK,SAAAoB,GAAG,OAAI,cAAC,EAAD,eAA8BA,GAAZA,EAAIlB,aEY1CmB,EAhCM,WAAM,MAGa7C,mBAAS,CAAC,WAHvB,mBAGhB8C,EAHgB,KAGJ/C,EAHI,KAiBvB,OACI,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BACK+C,EAAWtB,KAAI,SAAAhB,GAAS,OAAI,cAAC,EAAD,CAAyBO,SAAUP,GAArBA,YClB1CuC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.21a8ad75.chunk.js","sourcesContent":["import React, { useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n//impt => para importar los PropTypes de manera mas rapida en visual studio code\r\n\r\n\r\n\r\nexport const AddCategory =  ({setCategories}) =>  { //setCategories lo pasamos como props desde el GifExpertApp.\r\n\r\n    const [inputValue, setInputValue] = useState(''); //Usamos el hook useState para modificar los estados\r\n    \r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value) //Actualizar el estado del input con el valor del mismo\r\n        \r\n    }\r\n\r\n    const handleSubmit = (event) => { //Esta funciona retorna cuando se le de enter al input\r\n        event.preventDefault(); //Prevenir que recargue el navegador\r\n        \r\n\r\n        if (inputValue.trim().length > 2) { //trim( ) devuelve la cadena de texto despojada de los espacios en blanco en ambos extremos\r\n            setCategories( categoria => [inputValue, ...categoria]) //Usamos el operador spread en el arreglo ...categoria y le pasamos el valor nuevo que viene del input\r\n            setInputValue(''); //Ponemos el input en blanco una vez hace una busqueda\r\n        }\r\n\r\n    }\r\n    \r\n        return (\r\n            <form onSubmit={handleSubmit}> \r\n                <input type=\"text\"\r\n                placeholder=\"buscar\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}/>\r\n            </form>\r\n        )\r\n    }\r\n\r\n\r\nexport default AddCategory\r\n\r\n//Le decimos en la cosola que setCategories que viene de GifExpertApp tiene que ser requerido en los props\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async(category) => { //Usamos Async y await para hacer una peticion asincrona\r\n    const api = `BHzrVw5bm8RmxyqDHF6i4qP9iH3UesCm`\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${api}`; //Esa es la url para hacer las peticiones GET a giphy - encodeURI nos sirve para quitar los espacios con %20 etc, para sea una URL Valida\r\n    const resp = await fetch(url); //Usamos el fetch para consumir los datos\r\n    const {data} = await resp.json(); // Los datos los pasamos a un formato JSON\r\n    const gifs = data.map( gifImg => { // Mandé la data al console.log para ver los datos y de ahi fui sacando las propiedades que manda la api, además recorremos el arreglo con map\r\n        return{ //Retornamos un objeto con las propiedades\r\n            id: gifImg.id,\r\n            title: gifImg.title,\r\n            images: gifImg.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n\r\n\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({id, title, images}) => {\r\n\r\n    console.log(id, title, images)\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInDown'>\r\n            <img src={images} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React, {} from 'react'\r\nimport { useFetchGif } from '../hooks/useFetchGif'\r\n// import { getGifs } from '../helpers/getGifs'\r\nimport GifGridItem from './GifGridItem'\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const {data, loading} = useFetchGif(category);\r\n\r\n\r\n\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    // useEffect( () => { //Solo se ejecute esta instrucción cuando el componente es renderizado por primera vez\r\n    //     getGifs(category)\r\n    //     .then(imgs => setImages(imgs))\r\n    // }, [category])//Si la categoria cambia podremos volver a cambiar esa peticion http\r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n\r\n        {loading && <p>Loading</p>}\r\n        <div className='card-grid'>\r\n                 {data.map( img => <GifGridItem key={img.id} {...img}/>)}\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGif = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading:true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category).then( imgs => {\r\n                       \r\n            setstate({\r\n                data: imgs,\r\n                loading:false\r\n            });\r\n        })\r\n    }, [category])\r\n\r\n\r\n\r\n    // setTimeout(() => {\r\n    //     setstate({\r\n    //         data: [1,2,3,4,5],\r\n    //         loading:false\r\n    //     })\r\n    // }, 3000);\r\n\r\n    return state;\r\n\r\n}","import React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['Futbol'])\r\n    \r\n    // const handledAdd = () => {\r\n    //   /*AGREGAR ELEMENTOS AL ARREGLO DE ESTA MANERA PARA CAMBIAR EL ESTADO*/ \r\n    //   // setCategories([...categories, 'push']);\r\n    //   // setCategories(['push', ...categories]);\r\n    //   setCategories(cate => [...cate, 'Hola']);\r\n\r\n    // }\r\n\r\n\r\n\r\n    \r\n    // el key no puede ser el indice y debe ser unico\r\n    return (\r\n        <>\r\n          <h2>GifExpertApp</h2>\r\n          <AddCategory setCategories={setCategories}/>\r\n          <hr/>\r\n          {/* <button onClick={handledAdd}>Agregar</button> */}\r\n          \r\n          <ol>\r\n              {categories.map(categoria => <GifGrid key={categoria} category={categoria}/>\r\n              )}\r\n          </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}